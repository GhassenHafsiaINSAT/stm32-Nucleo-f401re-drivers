
stm32_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000474  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000608  08000610  00010610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000608  08000608  00010610  2**0
                  CONTENTS
  4 .ARM          00000000  08000608  08000608  00010610  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000608  08000610  00010610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000608  08000608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800060c  0800060c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000000  08000610  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000610  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010610  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000991  00000000  00000000  00010640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000024a  00000000  00000000  00010fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00011220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  000112d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000016a0  00000000  00000000  00011368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000af8  00000000  00000000  00012a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005810  00000000  00000000  00013500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00018d10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000210  00000000  00000000  00018d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005f0 	.word	0x080005f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080005f0 	.word	0x080005f0

080001d4 <GPIO_ReadPin>:
 *      Author: ghassen
 */
#include "gpio.h"
#include "rcc.h"

int GPIO_ReadPin(GPIO_Typdef_t* GPIOx, uint16_t GPIO_PIN){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	807b      	strh	r3, [r7, #2]
	if ((GPIOx->GPIO_IDR & GPIO_PIN) == 0)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	691a      	ldr	r2, [r3, #16]
 80001e4:	887b      	ldrh	r3, [r7, #2]
 80001e6:	4013      	ands	r3, r2
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d101      	bne.n	80001f0 <GPIO_ReadPin+0x1c>
		return 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	e000      	b.n	80001f2 <GPIO_ReadPin+0x1e>
	else
		return 1;
 80001f0:	2301      	movs	r3, #1
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr

080001fe <GPIO_SetPin>:

void GPIO_SetPin(GPIO_Typdef_t* GPIOx, uint16_t GPIO_PIN){
 80001fe:	b480      	push	{r7}
 8000200:	b083      	sub	sp, #12
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
 8000206:	460b      	mov	r3, r1
 8000208:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIO_BSRR = ((uint32_t) GPIO_PIN);
 800020a:	887a      	ldrh	r2, [r7, #2]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	619a      	str	r2, [r3, #24]
}
 8000210:	bf00      	nop
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <GPIO_ResetPin>:

void GPIO_ResetPin(GPIO_Typdef_t* GPIOx, uint16_t GPIO_PIN){
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	460b      	mov	r3, r1
 8000226:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIO_BSRR = ((uint32_t) GPIO_PIN ) << 16;
 8000228:	887b      	ldrh	r3, [r7, #2]
 800022a:	041a      	lsls	r2, r3, #16
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	619a      	str	r2, [r3, #24]
}
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <GPIO_CLK_Ctrl>:
		GPIOx->GPIO_BSRR = GPIO_PIN;
	else
		GPIOx->GPIO_BSRR = GPIO_PIN << 16;
}

void GPIO_CLK_Ctrl(GPIO_Typdef_t* GPIOx, uint8_t control){
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	460b      	mov	r3, r1
 8000246:	70fb      	strb	r3, [r7, #3]
	if (control == ENABLE){
 8000248:	78fb      	ldrb	r3, [r7, #3]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d12b      	bne.n	80002a6 <GPIO_CLK_Ctrl+0x6a>
		if (GPIOx == GPIOA){
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a2f      	ldr	r2, [pc, #188]	; (8000310 <GPIO_CLK_Ctrl+0xd4>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d106      	bne.n	8000264 <GPIO_CLK_Ctrl+0x28>
			GPIOA_CLK_EN();
 8000256:	4b2f      	ldr	r3, [pc, #188]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 8000258:	6a1b      	ldr	r3, [r3, #32]
 800025a:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6213      	str	r3, [r2, #32]
		}
		else if (GPIOx == GPIOD){
			GPIOD_CLK_DIS();
		}
	}
}
 8000262:	e04e      	b.n	8000302 <GPIO_CLK_Ctrl+0xc6>
		else if (GPIOx == GPIOB){
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4a2c      	ldr	r2, [pc, #176]	; (8000318 <GPIO_CLK_Ctrl+0xdc>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d106      	bne.n	800027a <GPIO_CLK_Ctrl+0x3e>
			GPIOB_CLK_EN();
 800026c:	4b29      	ldr	r3, [pc, #164]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	4a28      	ldr	r2, [pc, #160]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 8000272:	f043 0302 	orr.w	r3, r3, #2
 8000276:	6213      	str	r3, [r2, #32]
}
 8000278:	e043      	b.n	8000302 <GPIO_CLK_Ctrl+0xc6>
		else if (GPIOx == GPIOC){
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a27      	ldr	r2, [pc, #156]	; (800031c <GPIO_CLK_Ctrl+0xe0>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d106      	bne.n	8000290 <GPIO_CLK_Ctrl+0x54>
			GPIOC_CLK_EN();
 8000282:	4b24      	ldr	r3, [pc, #144]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 8000284:	6a1b      	ldr	r3, [r3, #32]
 8000286:	4a23      	ldr	r2, [pc, #140]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 8000288:	f043 0304 	orr.w	r3, r3, #4
 800028c:	6213      	str	r3, [r2, #32]
}
 800028e:	e038      	b.n	8000302 <GPIO_CLK_Ctrl+0xc6>
		else if (GPIOx == GPIOD){
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4a23      	ldr	r2, [pc, #140]	; (8000320 <GPIO_CLK_Ctrl+0xe4>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d134      	bne.n	8000302 <GPIO_CLK_Ctrl+0xc6>
			GPIOD_CLK_EN();
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 800029a:	6a1b      	ldr	r3, [r3, #32]
 800029c:	4a1d      	ldr	r2, [pc, #116]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 800029e:	f043 0308 	orr.w	r3, r3, #8
 80002a2:	6213      	str	r3, [r2, #32]
}
 80002a4:	e02d      	b.n	8000302 <GPIO_CLK_Ctrl+0xc6>
	else if (control == DISABLE){
 80002a6:	78fb      	ldrb	r3, [r7, #3]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d12a      	bne.n	8000302 <GPIO_CLK_Ctrl+0xc6>
		if (GPIOx == GPIOA){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a18      	ldr	r2, [pc, #96]	; (8000310 <GPIO_CLK_Ctrl+0xd4>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d106      	bne.n	80002c2 <GPIO_CLK_Ctrl+0x86>
			GPIOA_CLK_DIS();
 80002b4:	4b17      	ldr	r3, [pc, #92]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	4a16      	ldr	r2, [pc, #88]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6113      	str	r3, [r2, #16]
}
 80002c0:	e01f      	b.n	8000302 <GPIO_CLK_Ctrl+0xc6>
		else if (GPIOx == GPIOB){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a14      	ldr	r2, [pc, #80]	; (8000318 <GPIO_CLK_Ctrl+0xdc>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_CLK_Ctrl+0x9c>
			GPIOB_CLK_DIS();
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 80002cc:	691b      	ldr	r3, [r3, #16]
 80002ce:	4a11      	ldr	r2, [pc, #68]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 80002d0:	f043 0302 	orr.w	r3, r3, #2
 80002d4:	6113      	str	r3, [r2, #16]
}
 80002d6:	e014      	b.n	8000302 <GPIO_CLK_Ctrl+0xc6>
		else if (GPIOx == GPIOC){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a10      	ldr	r2, [pc, #64]	; (800031c <GPIO_CLK_Ctrl+0xe0>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_CLK_Ctrl+0xb2>
			GPIOC_CLK_DIS();
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 80002e2:	691b      	ldr	r3, [r3, #16]
 80002e4:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6113      	str	r3, [r2, #16]
}
 80002ec:	e009      	b.n	8000302 <GPIO_CLK_Ctrl+0xc6>
		else if (GPIOx == GPIOD){
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <GPIO_CLK_Ctrl+0xe4>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d105      	bne.n	8000302 <GPIO_CLK_Ctrl+0xc6>
			GPIOD_CLK_DIS();
 80002f6:	4b07      	ldr	r3, [pc, #28]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	4a06      	ldr	r2, [pc, #24]	; (8000314 <GPIO_CLK_Ctrl+0xd8>)
 80002fc:	f043 0308 	orr.w	r3, r3, #8
 8000300:	6113      	str	r3, [r2, #16]
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40020000 	.word	0x40020000
 8000314:	40023800 	.word	0x40023800
 8000318:	40020400 	.word	0x40020400
 800031c:	40020800 	.word	0x40020800
 8000320:	40020c00 	.word	0x40020c00

08000324 <GPIO_Init>:
void GPIO_Init(GPIO_Typdef_t* GPIOx, GPIO_PinConfig_t* gpio){
 8000324:	b480      	push	{r7}
 8000326:	b089      	sub	sp, #36	; 0x24
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]

	uint32_t pin = 0x00u;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
	uint32_t target_pin = 0x00u;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
	for (uint32_t position = 0; position < 16; position++){
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]
 800033a:	e088      	b.n	800044e <GPIO_Init+0x12a>
		pin = 0x01u << position;
 800033c:	2201      	movs	r2, #1
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	fa02 f303 	lsl.w	r3, r2, r3
 8000344:	613b      	str	r3, [r7, #16]
		target_pin = (gpio->GPIO_PIN) & pin;
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	693a      	ldr	r2, [r7, #16]
 800034c:	4013      	ands	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]
		if (target_pin == pin){
 8000350:	68fa      	ldr	r2, [r7, #12]
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	429a      	cmp	r2, r3
 8000356:	d177      	bne.n	8000448 <GPIO_Init+0x124>
			if (((gpio->GPIO_Mode != GPIO_MODE_IT_RAISING) |
					(gpio->GPIO_Mode != GPIO_MODE_IT_FALLING)) |
					((gpio->GPIO_Mode != GPIO_MODE_IT_RAISING_FALLING))){
				GPIOx->GPIO_MODER &= ~(0x3u << 2*position);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	2103      	movs	r1, #3
 8000362:	fa01 f303 	lsl.w	r3, r1, r3
 8000366:	43db      	mvns	r3, r3
 8000368:	401a      	ands	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	601a      	str	r2, [r3, #0]
				GPIOx->GPIO_MODER |= (gpio->GPIO_Mode) << 2*position;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	6859      	ldr	r1, [r3, #4]
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	601a      	str	r2, [r3, #0]

				GPIOx->GPIO_OTYPER &= ~(0x3u << 2*position);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	685a      	ldr	r2, [r3, #4]
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	005b      	lsls	r3, r3, #1
 800038c:	2103      	movs	r1, #3
 800038e:	fa01 f303 	lsl.w	r3, r1, r3
 8000392:	43db      	mvns	r3, r3
 8000394:	401a      	ands	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	605a      	str	r2, [r3, #4]
				GPIOx->GPIO_OTYPER |= (gpio->GPIO_Otyper) << 2*position;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	685a      	ldr	r2, [r3, #4]
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	6899      	ldr	r1, [r3, #8]
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	431a      	orrs	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	605a      	str	r2, [r3, #4]

				GPIOx->GPIO_OSPEEDR &= ~(0x3u << 2*position);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	689a      	ldr	r2, [r3, #8]
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	2103      	movs	r1, #3
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	43db      	mvns	r3, r3
 80003c0:	401a      	ands	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	609a      	str	r2, [r3, #8]
				GPIOx->GPIO_OSPEEDR |= (gpio->GPIO_Ospeeder) << 2*position;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	689a      	ldr	r2, [r3, #8]
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	68d9      	ldr	r1, [r3, #12]
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	fa01 f303 	lsl.w	r3, r1, r3
 80003d6:	431a      	orrs	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	609a      	str	r2, [r3, #8]

				GPIOx->GPIO_PUPDR &= ~(0x3u << 2*position);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	68da      	ldr	r2, [r3, #12]
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	2103      	movs	r1, #3
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	43db      	mvns	r3, r3
 80003ec:	401a      	ands	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	60da      	str	r2, [r3, #12]
				GPIOx->GPIO_PUPDR |= (gpio->GPIO_PullPush) << 2*position;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	68da      	ldr	r2, [r3, #12]
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	6919      	ldr	r1, [r3, #16]
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000402:	431a      	orrs	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	60da      	str	r2, [r3, #12]

				if (gpio->GPIO_Mode == GPIO_MODE_ALTERNATE){
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	2b02      	cmp	r3, #2
 800040e:	d11b      	bne.n	8000448 <GPIO_Init+0x124>
					uint32_t AF_reg = gpio->GPIO_PIN / 8;
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	08db      	lsrs	r3, r3, #3
 8000416:	61fb      	str	r3, [r7, #28]
					uint32_t AFx = gpio->GPIO_PIN % 8;
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f003 0307 	and.w	r3, r3, #7
 8000420:	61bb      	str	r3, [r7, #24]
					GPIOx->GPIO_AF[AF_reg] |= (gpio->GPIO_AF << AFx * 4);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	69fa      	ldr	r2, [r7, #28]
 8000426:	3208      	adds	r2, #8
 8000428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800042c:	683a      	ldr	r2, [r7, #0]
 800042e:	7d12      	ldrb	r2, [r2, #20]
 8000430:	4611      	mov	r1, r2
 8000432:	69ba      	ldr	r2, [r7, #24]
 8000434:	0092      	lsls	r2, r2, #2
 8000436:	fa01 f202 	lsl.w	r2, r1, r2
 800043a:	ea43 0102 	orr.w	r1, r3, r2
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	69fa      	ldr	r2, [r7, #28]
 8000442:	3208      	adds	r2, #8
 8000444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint32_t position = 0; position < 16; position++){
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	3301      	adds	r3, #1
 800044c:	617b      	str	r3, [r7, #20]
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	2b0f      	cmp	r3, #15
 8000452:	f67f af73 	bls.w	800033c <GPIO_Init+0x18>

			}

		}
	}
}
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	3724      	adds	r7, #36	; 0x24
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <GPIO_IRQHandling>:
	uint8_t iprx = IRQ_number / 4;
	uint8_t iprx_section = IRQ_number % 4;
	*(NVIC_IPR + (iprx*4)) |= (IRQ_priority << ((iprx_section * 8) + 4));
}

void GPIO_IRQHandling(uint8_t pin_number){
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	if(EXTI->EXTI_PR & (1 << pin_number)){
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <GPIO_IRQHandling+0x3c>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	79fa      	ldrb	r2, [r7, #7]
 8000474:	2101      	movs	r1, #1
 8000476:	fa01 f202 	lsl.w	r2, r1, r2
 800047a:	4013      	ands	r3, r2
 800047c:	2b00      	cmp	r3, #0
 800047e:	d009      	beq.n	8000494 <GPIO_IRQHandling+0x30>
		EXTI->EXTI_PR |= (1 << pin_number);
 8000480:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <GPIO_IRQHandling+0x3c>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	79fa      	ldrb	r2, [r7, #7]
 8000486:	2101      	movs	r1, #1
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	4611      	mov	r1, r2
 800048e:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <GPIO_IRQHandling+0x3c>)
 8000490:	430b      	orrs	r3, r1
 8000492:	6153      	str	r3, [r2, #20]
	}
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40013c00 	.word	0x40013c00

080004a4 <EXTI0_IRQHandler>:
uint8_t EtatBouton;
uint32_t x;
int i;
GPIO_Handle_t GPIO_InitStruct ;

void EXTI0_IRQHandler(void){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(0);
 80004a8:	2000      	movs	r0, #0
 80004aa:	f7ff ffdb 	bl	8000464 <GPIO_IRQHandling>
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <main>:

int main ()
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	//Activate GPIOs Clocks
	GPIO_CLK_Ctrl(GPIOA, ENABLE);
 80004b8:	2101      	movs	r1, #1
 80004ba:	4821      	ldr	r0, [pc, #132]	; (8000540 <main+0x8c>)
 80004bc:	f7ff febe 	bl	800023c <GPIO_CLK_Ctrl>
	GPIO_CLK_Ctrl(GPIOC, ENABLE);
 80004c0:	2101      	movs	r1, #1
 80004c2:	4820      	ldr	r0, [pc, #128]	; (8000544 <main+0x90>)
 80004c4:	f7ff feba 	bl	800023c <GPIO_CLK_Ctrl>
	//Configure GPIO Pins (Led: PA5) ! MODE INPUT ; SPEED LOW; OUTOUT PUSH PULL; NO PULL

	// push button configuration
	GPIO_InitStruct.GPIOx = GPIOC;
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <main+0x94>)
 80004ca:	4a1e      	ldr	r2, [pc, #120]	; (8000544 <main+0x90>)
 80004cc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.gpio_config.GPIO_PIN = GPIO_PIN_13  ;
 80004ce:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <main+0x94>)
 80004d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004d4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.gpio_config.GPIO_Mode = GPIO_MODE_INPUT ;
 80004d6:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <main+0x94>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.gpio_config.GPIO_PullPush = GPIO_PullPush_NoPull;
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <main+0x94>)
 80004de:	2200      	movs	r2, #0
 80004e0:	615a      	str	r2, [r3, #20]

	GPIO_Init (GPIO_InitStruct.GPIOx, &(GPIO_InitStruct.gpio_config));
 80004e2:	4b19      	ldr	r3, [pc, #100]	; (8000548 <main+0x94>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4919      	ldr	r1, [pc, #100]	; (800054c <main+0x98>)
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ff1b 	bl	8000324 <GPIO_Init>

	// Led configuration
	GPIO_InitStruct.GPIOx = GPIOA;
 80004ee:	4b16      	ldr	r3, [pc, #88]	; (8000548 <main+0x94>)
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <main+0x8c>)
 80004f2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.gpio_config.GPIO_PIN = GPIO_PIN_5;
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <main+0x94>)
 80004f6:	2220      	movs	r2, #32
 80004f8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.gpio_config.GPIO_Mode = GPIO_MODE_OUTPUT;
 80004fa:	4b13      	ldr	r3, [pc, #76]	; (8000548 <main+0x94>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.gpio_config.GPIO_PullPush = GPIO_PullPush_NoPull;
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <main+0x94>)
 8000502:	2200      	movs	r2, #0
 8000504:	615a      	str	r2, [r3, #20]

	GPIO_Init(GPIO_InitStruct.GPIOx, &(GPIO_InitStruct.gpio_config));
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <main+0x94>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4910      	ldr	r1, [pc, #64]	; (800054c <main+0x98>)
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff09 	bl	8000324 <GPIO_Init>


	while (1)
	{
		//Read Push Button State (0=Pressed, 1=Released)
		EtatBouton=GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 8000512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000516:	480b      	ldr	r0, [pc, #44]	; (8000544 <main+0x90>)
 8000518:	f7ff fe5c 	bl	80001d4 <GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	b2da      	uxtb	r2, r3
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <main+0x9c>)
 8000522:	701a      	strb	r2, [r3, #0]

		if (EtatBouton==0)  //If Pressed, Led ON
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <main+0x9c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d104      	bne.n	8000536 <main+0x82>

			GPIO_SetPin(GPIOA, GPIO_PIN_5);
 800052c:	2120      	movs	r1, #32
 800052e:	4804      	ldr	r0, [pc, #16]	; (8000540 <main+0x8c>)
 8000530:	f7ff fe65 	bl	80001fe <GPIO_SetPin>
 8000534:	e7ed      	b.n	8000512 <main+0x5e>

		else //Released, Led OFF
			GPIO_ResetPin(GPIOA, GPIO_PIN_5);
 8000536:	2120      	movs	r1, #32
 8000538:	4801      	ldr	r0, [pc, #4]	; (8000540 <main+0x8c>)
 800053a:	f7ff fe6f 	bl	800021c <GPIO_ResetPin>
		EtatBouton=GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 800053e:	e7e8      	b.n	8000512 <main+0x5e>
 8000540:	40020000 	.word	0x40020000
 8000544:	40020800 	.word	0x40020800
 8000548:	20000020 	.word	0x20000020
 800054c:	20000024 	.word	0x20000024
 8000550:	2000001c 	.word	0x2000001c

08000554 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000554:	480d      	ldr	r0, [pc, #52]	; (800058c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000556:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000558:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <LoopForever+0x6>)
  ldr r1, =_edata
 800055e:	490d      	ldr	r1, [pc, #52]	; (8000594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <LoopForever+0xe>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a0a      	ldr	r2, [pc, #40]	; (800059c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000574:	4c0a      	ldr	r4, [pc, #40]	; (80005a0 <LoopForever+0x16>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000582:	f000 f811 	bl	80005a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000586:	f7ff ff95 	bl	80004b4 <main>

0800058a <LoopForever>:

LoopForever:
  b LoopForever
 800058a:	e7fe      	b.n	800058a <LoopForever>
  ldr   r0, =_estack
 800058c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000594:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000598:	08000610 	.word	0x08000610
  ldr r2, =_sbss
 800059c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005a0:	2000003c 	.word	0x2000003c

080005a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a4:	e7fe      	b.n	80005a4 <ADC_IRQHandler>
	...

080005a8 <__libc_init_array>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	4d0d      	ldr	r5, [pc, #52]	; (80005e0 <__libc_init_array+0x38>)
 80005ac:	4c0d      	ldr	r4, [pc, #52]	; (80005e4 <__libc_init_array+0x3c>)
 80005ae:	1b64      	subs	r4, r4, r5
 80005b0:	10a4      	asrs	r4, r4, #2
 80005b2:	2600      	movs	r6, #0
 80005b4:	42a6      	cmp	r6, r4
 80005b6:	d109      	bne.n	80005cc <__libc_init_array+0x24>
 80005b8:	4d0b      	ldr	r5, [pc, #44]	; (80005e8 <__libc_init_array+0x40>)
 80005ba:	4c0c      	ldr	r4, [pc, #48]	; (80005ec <__libc_init_array+0x44>)
 80005bc:	f000 f818 	bl	80005f0 <_init>
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	10a4      	asrs	r4, r4, #2
 80005c4:	2600      	movs	r6, #0
 80005c6:	42a6      	cmp	r6, r4
 80005c8:	d105      	bne.n	80005d6 <__libc_init_array+0x2e>
 80005ca:	bd70      	pop	{r4, r5, r6, pc}
 80005cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d0:	4798      	blx	r3
 80005d2:	3601      	adds	r6, #1
 80005d4:	e7ee      	b.n	80005b4 <__libc_init_array+0xc>
 80005d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005da:	4798      	blx	r3
 80005dc:	3601      	adds	r6, #1
 80005de:	e7f2      	b.n	80005c6 <__libc_init_array+0x1e>
 80005e0:	08000608 	.word	0x08000608
 80005e4:	08000608 	.word	0x08000608
 80005e8:	08000608 	.word	0x08000608
 80005ec:	0800060c 	.word	0x0800060c

080005f0 <_init>:
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f2:	bf00      	nop
 80005f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f6:	bc08      	pop	{r3}
 80005f8:	469e      	mov	lr, r3
 80005fa:	4770      	bx	lr

080005fc <_fini>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	bf00      	nop
 8000600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000602:	bc08      	pop	{r3}
 8000604:	469e      	mov	lr, r3
 8000606:	4770      	bx	lr
