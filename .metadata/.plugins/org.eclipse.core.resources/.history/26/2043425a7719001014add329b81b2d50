/*
 * i2c.c
 *
 *  Created on: Apr 12, 2025
 *      Author: ghass
 */

#include "i2c.h"
#include "rcc.h"


static void I2C_Generate_StartCondition(I2C_Typedef_t* I2Cx);
static void I2C_Send_slave_address(I2C_Typedef_t* I2Cx, uint8_t slave_address, uint8_t bit);
static void I2C_clear_ADDR_bit(I2C_Typedef_t* I2Cx);
static void I2C_Generate_StopCondition(I2C_Typedef_t* I2Cx);


static void I2C_Generate_StartCondition(I2C_Typedef_t* I2Cx){
	I2Cx->I2C_CR1 |= ( 1 << 8 );
}

static void I2C_Send_slave_address(I2C_Typedef_t* I2Cx, uint8_t slave_address, uint8_t bit){
	uint8_t reg_temp = slave_address << 1;
	if (bit == 0){
		reg_temp &= ~(1);
	}
	else {
		reg_temp |= 1;
	}
	I2Cx->I2C_DR = reg_temp;
}

static void I2C_clear_ADDR_bit(I2C_Typedef_t* I2Cx){
	uint32_t dummy_read;
	dummy_read = I2Cx->I2C_SR1;
	dummy_read = I2Cx->I2C_SR2;
	(void)dummy_read;
}

static void I2C_Generate_StopCondition(I2C_Typedef_t* I2Cx){
	I2Cx->I2C_CR1 |= ( 1 << 9 );
}



void I2C_PeriClockControl(I2C_Typedef_t* I2Cx, uint8_t EnOrDis){
	if (EnOrDis == ENABLE){
		if (I2Cx == I2C1){
			I2C1_CLK_EN();
		}
		else if (I2Cx == I2C2){
			I2C2_CLK_EN();
		}
		else if (I2Cx == I2C3){
			I2C3_CLK_EN();
		}
	}
	else if (EnOrDis == DISABLE){
		if (I2Cx == I2C1){
			I2C1_CLK_DIS();
		}
		else if (I2Cx == I2C2){
			I2C2_CLK_DIS();
		}
		else if (I2Cx == I2C3){
			I2C3_CLK_DIS();
		}
	}
}
void I2C_Init(I2C_Typedef_t* I2Cx, I2C_config_t i2c_config){

	uint32_t reg_temp = 0;
	reg_temp |= (i2c_config.I2C_ACKControl << I2C_CR1_ACK);

	I2Cx->I2C_CR1 = reg_temp;

	reg_temp = 0;
	reg_temp = RCC_GetPCLK1Value() / 100000000U;

	I2Cx->I2C_CR2 = reg_temp & 0x3F;

	reg_temp = 0;
	reg_temp = i2c_config.I2C_DeviceAddress << 1;
	reg_temp |= 1 << 14; 	// reserved bit 14 should be enabled by the software
	I2Cx->I2C_OAR1 = reg_temp;

	// CCR calculations
	uint16_t ccr_value = 0;
	reg_temp = 0;
	if (i2c_config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
		ccr_value = RCC_GetPCLK1Value() / (2 * i2c_config.I2C_SCLSpeed);
		reg_temp |= ccr_value & 0xFFF;
	}
	else{
		reg_temp |= 1 << 15;
		reg_temp |= i2c_config.I2C_FMDutyCycle << 14;
		if (i2c_config.I2C_FMDutyCycle == I2C_FMDutyCycle_2){
			ccr_value = RCC_GetPCLK1Value() / (3 * i2c_config.I2C_SCLSpeed);
		}
		else if (i2c_config.I2C_FMDutyCycle == I2C_FMDutyCycle_16_9){
			ccr_value = RCC_GetPCLK1Value() / (25 * i2c_config.I2C_SCLSpeed);

		}
		reg_temp |= ccr_value & 0xFFF;
	}
	I2Cx->I2C_CCR = reg_temp;

	if (i2c_config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
		reg_temp = (RCC_GetPCLK1Value() / 1000000U) + 1;
	}
	else {
		reg_temp = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
	}
	I2Cx->I2C_TRISE = reg_temp & 0x3F;
	I2C_PeriClockControl(I2Cx, ENABLE);
}


void I2C_DeInit(I2C_Typedef_t I2Cx){

}

void I2C_Master_Send(I2C_Typedef_t* I2Cx, I2C_config_t i2c_config, uint8_t* pTxBuffer, uint32_t len, uint8_t slave_address){

	// start condition generation
	I2C_Generate_StartCondition(I2Cx);

	// wait until SB bit is equal to 0
	while( !(I2Cx->I2C_SR1 & 1));

	// write slave address and read/write bit
	I2C_Send_slave_address(I2Cx, slave_address, 0);

	// wait until ADDR flag is set
	while ( !(I2Cx->I2C_SR1 &  (1 << 1)));

	// clear the ADDR flag
	clear_ADDR_bit(I2Cx);

	// send process
	while (len != 0){
		// check if TXE is set, then Data register is empty
		while (I2Cx->I2C_SR1 &  (1 << 7));
		I2Cx->I2C_DR = *pTxBuffer;
		pTxBuffer ++;
		len --;
	}

	// wait for BTF and TXE are equal to 1
	while ( !( I2Cx->I2C_SR1 & (1 << 7) ) );
	while ( !( I2Cx->I2C_SR1 & (1 << 2) ) );

	// Generate stop condition
	I2C_Generate_StopCondition(I2Cx);
}

void I2C_Master_Receive(I2C_Typedef_t* I2Cx, I2C_config_t i2c_config, uint8_t* pRxBuffer, uint32_t len, uint8_t slave_address){
	// generate start condition
	I2C_Generate_StartCondition(I2Cx);

	//wait until SB is cleared
	while( !(I2Cx->I2C_SR1 & 1) );

	// send slave address + read bit
	I2C_Send_slave_address(I2Cx, slave_address, 1);

	// check if ADDR bit is set -> the address phase is successful
	while ( !(I2Cx->I2C_SR1 & (1 << 1)));

	// waits until RXNE is set
	if (len == 1){
		// master sends nack to stop conversation
		I2Cx->I2C_CR1 &= ~(1 << 10);

		// clear ADDR bit
		I2C_clear_ADDR_bit(I2Cx);

		// wait until RXNE flag is set
		while ( !(I2Cx->I2C_SR1 & (1 << 6)));

		// generates stop condition
		I2C_Generate_StopCondition(I2Cx);

		// read from data register
		*pRxBuffer = I2Cx->I2C_DR;

	}
	while ( len > 0){
		// clear ADDR bit so the data reception begins
		I2C_clear_ADDR_bit(I2Cx);

		// wait for RXNE bit is equal to 1
		while ( !(I2Cx->I2C_SR1 & (1 << 6)));
		if ( len == 2){
			// master sends NACK to stop conversation
			I2Cx->I2C_CR1 &= ~(1 << 10);

			// generates stop condition
			I2C_Generate_StopCondition(I2Cx);
		}
		*pRxBuffer = (uint8_t)(I2Cx->I2C_DR);
		pRxBuffer++;
		len--;
	}
	// re-enable the ACKing
	if (i2c_config.I2C_ACKControl == 1){
		I2Cx->I2C_CR1 |= (1 << 10);
	}
}
