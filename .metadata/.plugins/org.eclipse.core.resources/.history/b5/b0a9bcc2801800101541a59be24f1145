/*
 * i2c.h
 *
 *  Created on: Apr 12, 2025
 *      Author: ghass
 */

#ifndef I2C_H_
#define I2C_H_

#include "NUCLEOf401_mem_map.h"

typedef struct {
	uint32_t I2C_SCLSpeed;
	uint8_t I2C_DeviceAddress; 	// if the device is acting as a slave
	uint8_t I2C_ACKControl; 	// By default, acking is disabled
	uint16_t I2C_FMDutyCycle;	// in fast mode, duty cycle can be varied
} I2C_config_t;

typedef struct {
	I2C_Typedef_t 	*I2Cx;
	I2C_config_t	i2c_config;
} I2C_handle_t;

/*
 * @I2C_SCLSpeed
 */
#define I2C_SCL_SPEED_SM		100000
#define I2C_SCL_SPEED_FM4K		400000
#define I2C_SCL_SPEED_FM2K		200000

/*
 * @I2C_ACKControl
 */
#define I2C_ACK_ENABLE		1
#define I2C_ACK_DISABLE		0

/*
 * @I2C_FMDutyCycle
 */
#define I2C_FMDutyCycle_2		0
#define I2C_FMDutyCycle_16_9	1


void I2C_PeriClockControl(I2C_Typedef_t* I2Cx, uint8_t EnOrDis);
void I2C_Init(I2C_Typedef_t* I2Cx, I2C_config_t i2c_config);
void I2C_DeInit(I2C_Typedef_t I2Cx);

void I2C_Master_Send(I2C_Typedef_t* I2Cx, uint8_t* pTxBuffer, uint32_t len, uint8_t slave_address);
void I2C_Master_Receive(I2C_Typedef_t* I2Cx, uint8_t* pRxBuffer, uint32_t len);

static void I2C_Generate_StartCondition(I2C_Typedef_t* I2Cx);

void I2C_Slave_Send(I2C_Typedef_t* I2Cx, uint8_t* pTxBuffer, uint32_t len);
void I2C_Slave_Receive(I2C_Typedef_t* I2Cx, uint8_t* pRxBuffer, uint32_t len);

uint8_t I2C_Send_IT(I2C_handle_t* I2C_handler, uint8_t* pTxBuffer, uint32_t len);
uint8_t I2C_Receive_IT(I2C_handle_t* I2C_handler, uint8_t* pRxBuffer, uint32_t len);

void I2C_IRQInterruptConfig(uint8_t IRQ_Number, uint8_t EnOrDis);
void I2C_IRQPriorityConfig(uint8_t IRQ_Number, uint32_t IRQPriority);

void I2C_PeripheralControl(I2C_Typedef_t* I2Cx, uint8_t EnOrDis);
uint8_t I2C_GetFlagStatus(I2C_Typedef_t* I2Cx, uint32_t FlagName);
void I2C_ApplicationEventCallbak(I2C_handle_t* I2C_handler, uint8_t AppEv);
#endif /* I2C_H_ */
